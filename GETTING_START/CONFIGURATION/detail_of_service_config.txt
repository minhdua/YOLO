- type: The type of service. Valid values are s3, lambda, and lambda-apigateway.
bucket_name: The target S3 bucket where this application is hosted. Only relevant for s3-type services.
- build: Configuration used for build commands.
 + build.working_dir: Directory to be used as the root directory for builds. All other paths in build are assumed to be relative to build.working_dir.
 + build.dist_dir: Location for yolo to place built artifacts after a successful yolo build-lambda command. yolo push will collect build artifacts from this location.
 + build.dependencies: File containing a list of build dependencies. For Python projects, this is the relative path to a requirements.txt file.
 + build.include: A list of relative files and directories to include in build artifacts.
- deploy: Configuration used for service deployment commands.
 + deploy.apigateway: API Gateway-specific configuration. Only needed if the service type is lambda-apigateway.
 + deploy.apigateway.rest_api_name: Unique name for the REST API. This will appear as the API name under the API Gateway dashboard in the AWS console. is lambda-apigateway.
 + deploy.apigateway.swagger_template: File path (relative to the yolo.yaml file) which contains the API defintion in Swagger/OpenAPI format.
 + deploy.apigateway.domains: List of custom domains and base path mappings to wire up Lambda function handlers to the API. See APIGateway.Client.create_base_path_mapping. You must define at least one mapping.
 + deploy.apigateway.authorizers: Configuration for custom authorizers. This is useful if you need to integrate your service with an existing identity provider to provide authentication/authorization.  
 + APIGateway.Client.create_authorizer.
 + deploy.apigateway.integration: Configuration to wire up API Gateway requests to Lambda handlers. See APIGateway.Client.put_integration.
 + deploy.lambda_function_configuration: Lambda Function runtime configuration. Only needed if the service type is lambda or lambda-apigateway. See Lambda.Client.create_function.
  + deploy.parameters: Runtime environment/configuration parameters. Parameters defined in this section are stored encrypted in AWSâ€™s SSM Parameter Store Even configuration parameters which are not strictly secret are stored encrypted anyway.
  + deploy.parameters.stages: Sub-section for parameters for a specific stage.
  + deploy.parameters.stages.default: Special stage where common parameters can be defined in order to prevent duplication. Define parameters here which are common to all other stages.
  + deploy.parameters.stages.<stage>: List of parameters for a specific stage. Each parameter definition consists of an object with the following keys:
            name: [REQUIRED] Name of the parameter.
            value: [OPTIONAL] Default value for the parameter.
   + multiline: [OPTIONAL] Boolean value indicating if this parameter consists of multiple lines. This is useful for inputting multiline secrets such as private keys and SSL certificates.


